<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context 
         http://www.springframework.org/schema/context/spring-context.xsd">
	<!--配置整合mybatis过程 1.配置数据库相关参数 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!--2.数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!--配置连接池属性 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--c3p0私有属性 -->
		<property name="maxPoolSize" value="60" />
		<property name="minPoolSize" value="10" />
		<!--关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />

		<!--获取连接超时时间 -->
		<property name="checkoutTimeout" value="1000" />
		<!--当获取连接失败重试次数 -->
		<property name="acquireRetryAttempts" value="2" />
	</bean>

	<!--约定大于配置 -->
	<!--3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--往下才是mybatis和spring真正整合的配置 -->
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="com.edge" />
		<property name="mapperLocations">
			<array>
				<value>classpath*:com/edge/login/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/user/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/Index/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/role/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/department/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/privilege/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/userRole/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/post/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/processDefinition/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/function/mapper/*.xml</value>
				<value>classpath*:com/edge/index/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/customer/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/company/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/jobTask/mapper/*.xml</value>
				<value>classpath*:com/edge/product/mapper/*.xml</value>
				<value>classpath*:com/edge/material/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/product/rk/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/product/ck/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/material/rk/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/material/ck/mapper/*.xml</value>
				<value>classpath*:com/edge/business/sale/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/enclosure/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/myTask/mapper/*.xml</value>
				<value>classpath*:com/edge/business/checkProduct/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/reviewOpinion/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/alreadyTask/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/completedTask/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/dictionary/approval/mapper/*.xml</value>
				<value>classpath*:com/edge/business/ckfh/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/product/kc/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/materielId/mapper/*.xml</value>
				<value>classpath*:com/edge/business/productionPlan/mapper/*.xml</value>
				<value>classpath*:com/edge/business/materialPlan/mapper/*.xml</value>
				<value>classpath*:com/edge/business/processingIngredients/mapper/*.xml</value>
				<value>classpath*:com/edge/business/purchase/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/supplier/mapper/*.xml</value>
				<value>classpath*:com/edge/business/materialStockCK/mapper/*.xml</value>
				<value>classpath*:com/edge/business/productStockCk/mapper/*.xml</value>
				<value>classpath*:com/edge/stocks/material/kc/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/notice/mapper/*.xml</value>
				<value>classpath*:com/edge/xshtsk/mapper/*.xml</value>
				<value>classpath*:com/edge/checkDelivery/mapper/*.xml</value>
				<value>classpath*:com/edge/cghtfk/mapper/*.xml</value>
				<value>classpath*:com/edge/admin/permissionVerification/mapper/*.xml</value>
				<value>classpath*:com/edge/applicationCenter/wjg/mapper/*.xml</value>
				<value>classpath*:com/edge/currency/processView/mapper/*.xml</value>
				<value>classpath*:com/edge/applicationCenter/materielId/mapper/*.xml</value>
			</array>
		</property>
	</bean>

	<!--4:配置扫描Dao接口包,动态实现DAO接口,注入到spring容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 给出需要扫描的Dao接口 -->
		<property name="basePackage" value="com.edge.login.dao;com.edge.admin.Index.dao;
		com.edge.admin.user.dao;com.edge.admin.role.dao;com.edge.admin.department.dao;
		com.edge.admin.privilege.dao;com.edge.admin.userRole.dao;com.edge.admin.post.dao;
		com.edge.admin.processDefinition.dao;com.edge.admin.function.dao;com.edge.index.dao;
		com.edge.admin.customer.dao;com.edge.admin.company.dao; com.edge.admin.jobTask.dao;
		com.edge.product.dao;com.edge.stocks.product.rk.dao;com.edge.stocks.product.ck.dao;
		com.edge.material.dao;com.edge.stocks.material.rk.dao;com.edge.stocks.material.ck.dao;
		com.edge.business.sale.dao;com.edge.currency.enclosure.dao;com.edge.currency.myTask.dao;
		com.edge.business.checkProduct.dao;com.edge.currency.reviewOpinion.dao;
		com.edge.currency.alreadyTask.dao;com.edge.currency.completedTask.dao;
		com.edge.currency.dictionary.approval.dao;com.edge.business.ckfh.dao;
		com.edge.stocks.product.kc.dao;com.edge.admin.materielId.dao;com.edge.business.productionPlan.dao;
		com.edge.business.materialPlan.dao;com.edge.business.processingIngredients.dao;
		com.edge.business.purchase.dao;com.edge.admin.supplier.dao;com.edge.business.materialStockCK.dao;
		com.edge.business.productStockCk.dao;com.edge.stocks.material.kc.dao;com.edge.currency.notice.dao;
		com.edge.xshtsk.dao;com.edge.checkDelivery.dao;com.edge.cghtfk.dao;com.edge.admin.permissionVerification.dao;
		com.edge.applicationCenter.wjg.dao;com.edge.currency.processView.dao;com.edge.applicationCenter.materielId.dao;" />
		<!--注入SqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- 启用注解 -->
	<context:annotation-config />
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.edge" />

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置一个spring提供的对象，用于创建一个流程引擎配置对象 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="transactionManager" ref="transactionManager" />
		<property value="true" name="databaseSchemaUpdate" />
		<!-- <property name="databaseSchema" value="ACT"/> -->
		<!-- 必须注入数据源对象 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 创建流程引擎对象 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration"></property>
	</bean>

	<!-- 服务组件的bean -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService"    factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="taskService"       factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService"    factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	<bean id="formService"       factory-bean="processEngine" factory-method="getFormService" />
	
	<!--定时任务  -->
	 <bean name="Stock_Alarm" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<!-- 指定job的名称  -->
		<property name="name" value="spring-job"/>
		<!-- 指定job的分组 --> 
		<property name="group" value="spring-group"/>
		<!-- 指定具体的job类  -->
		<property name="jobClass" value="com.edge.jobTask.task.StockAlarmJob"/>
		<!-- 必须设置为true，如果为false，当没有活动的触发器与之关联时会在调度器中删除该任务  -->
		<property name="durability" value="true"/>
		<!-- 指定spring容器的key，如果不设定在job中jobmap中是获取不到spring容器的  -->
		<property name="applicationContextJobDataKey" value="applicationContext" />
	</bean> 
	
	<!-- 定义触发器 -->
   <!--  2.2：定义触发器的bean，定义一个Cron的Trigger，一个触发器只能和一个任务进行绑定 -->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
      <!--   指定Trigger的名称 -->
        <property name="name" value="Stock_Alarm_trigger1" />
    <!--     指定Trigger的名称 -->
        <property name="group" value="Stock_Alarm_trigger_group1" />
        <!-- 指定Tirgger绑定的Job -->
        <property name="jobDetail" ref="Stock_Alarm" />
        <!-- 指定Cron 的表达式 ，当前是每隔10分钟运行一次 -->
        <property name="cronExpression" value="0 */1 * * * ?" />
    </bean>


   <!--  定义调度器 -->
   <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="cronTrigger" />
            </list>
        </property>
    </bean> 
	
</beans>